* Loggregate

Aggregates, Analyses and Generates reports from log files.

Loggregate can read your log files given a glob pattern and generates a report with stats based on the logs.

* Compile from source

+ You might need to install some basic packages for this tool to work mentioned in =requirements.txt=. They are mentioned with
  software name (arch linux package name & debian package name)
  #+BEGIN_QUOTE text
  pkg-config (base-devel / build-essential)
  libfreetype (freetype2 / libfreetype6-dev)
  libfontconfig (fontconfig / libfontconfig-dev)
  #+END_QUOTE
+ Make sure you have rust toolchain installed.
+ Go to the releases page and download =loggregate-<version>.tar.gz= along with the =loggregate-<version>.tar.gz.asc= (recommended)
+ You can optionally check the signature of the tarball to verify the authenticity.
+ To verify the sinature you need my public pgp key. Run this command to get my key.
  #+BEGIN_SRC bash
    gpg --recv-key C8B2A95D8D855A9D8C6F0C78BCBCAE31ECE05007
  #+END_SRC
+ Then verify the signature by runnig the below command
  #+BEGIN_EXAMPLE bash
  gpg --verify loggregate-<version>.tar.gz.asc loggregate-<version>.tar.gz
  #+END_EXAMPLE
  Runnig this should say *Good Signature from "Akash Doppalapudi"*
+ You can skip the signature verification part if you want to though I'd recommned it. Next you need to extract the tar archive.
  #+BEGIN_EXAMPLE bash
    tar -xvf loggregate-<version>.tar.gz
  #+END_EXAMPLE
+ You can also simply clone this repository and ~cd~ into it but I recommned get the release tarball.
+ Run ~cargo build~. You can use ~--release~ flag to make an optimized release build.
+ Compiled binary can be found inside =target= folder.
+ You can also copy the binary to a location included in $PATH to run it like any other program.
  #+BEGIN_EXAMPLE bash
  cp target/release/loggregate /usr/local/bin
  #+END_EXAMPLE
  Text loggregate by running ~loggregate -h~

* Usage

You can get detailed usage by running =loggregate= with ~--help~ flag.

*** Required Args

+ ~--datetime-start~ Starting position of datetime in log statement (0 indexed)
+ ~--datetime-end~ End position of datetime in log statement (0 indexed)
+ ~--datetime-format~ Datetime string's format. eg: "%d/%m/&y %H:%M:&S". Use this [[https://docs.rs/chrono/latest/chrono/format/strftime/index.html][guide]] to see how to write datetime format.
+ ~--loglevel-pos~ Position of start of log level on log line
+ You also need to pass file glob pattern as a positional argument

*** Optional Args

+ ~--user~ / ~-u~ User can optionally give their name and it will be shown in the report

* Example

Say we have log files in =/var/log= ending with =.log= and log statement looks like this
#+BEGIN_SRC text
2015-07-29 17:41:44,747 - INFO  [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:2181:FastLeaderElection@774] - Notification time out: 3200
2015-07-29 19:04:12,394 - INFO  [/10.10.34.11:3888:QuorumCnxManager$Listener@493] - Received connection request /10.10.34.11:45307
#+END_SRC
then the command looks like
#+BEGIN_SRC bash
loggregate --datetime-start 0 --datetime-end 23 --loglevel-pos 26 --datetime-format "%Y-%m-%d %H:%M:%S,%3f" -u "John Doe" "/var/log/*.log"
#+END_SRC

Running this will generate bar plots and prepares a html file in current directory and you can open it in browser to see the report.

If the program has any problems reading datetime it writes the line it failed to read to =stderr=. You can redirect all the errors to a
seperate file by adding ~2> errors.txt~ to the end of the command.
#+BEGIN_SRC bash
loggregate --datetime-start 0 --datetime-end 23 --loglevel-pos 26 --datetime-format "%Y-%m-%d %H:%M:%S,%3f" -u "John Doe" "/var/log/*.log" 2> errors.txt
#+END_SRC
